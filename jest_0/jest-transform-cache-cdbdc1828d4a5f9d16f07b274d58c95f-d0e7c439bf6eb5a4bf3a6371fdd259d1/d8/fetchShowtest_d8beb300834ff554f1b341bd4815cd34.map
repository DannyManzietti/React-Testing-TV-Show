{"version":3,"sources":["fetchShow.test.js"],"names":["test","mockFetchShow","mockResolvedValueOnce","getByText","queryAllByTestId","getByTestId","debug","button","fireEvent","click"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;AAKAA,IAAI,CAAC,uCAAD,EAA0C,MAAI;AAClDC,uBAAcC,qBAAd;;AAIE,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,gBAAb;AAA+BC,IAAAA,WAA/B;AAA4CC,IAAAA;AAA5C,MAAsD,oBAAO,6BAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CAA5D;AAEA,QAAMC,MAAM,GAAGJ,SAAS,CAAC,WAAD,CAAxB;AACAK,EAAAA,SAAS,CAACC,KAAV,CAAgBF,MAAhB,EARgD,CAShD;AACA;AACA;AACA;AACA;AACA;AACD,CAfG,CAAJ","sourcesContent":["import React from 'react';\nimport { render } from '@testing-library/react';\nimport App from './fetchShow'\nimport { fetchShow as mockFetchShow } from './fetchShow';\n \n\n\ntest('Is the App rendering without crashing', ()=>{\nmockFetchShow.mockResolvedValueOnce()\n\n\n\n  const { getByText, queryAllByTestId, getByTestId, debug } = render(<App />);\n\n  const button = getByText(/get data/i);\n  fireEvent.click(button);\n  // debug();\n  // await waitForElement(() => {\n  //   expect(queryAllByTestId(/missions/i).toHaveLength(2));\n  // });\n  // below the \"await\" is the same as inside .then()\n  // expect(queryAllByTestId(/mission/i)).toHaveLength(2);\n})"]}
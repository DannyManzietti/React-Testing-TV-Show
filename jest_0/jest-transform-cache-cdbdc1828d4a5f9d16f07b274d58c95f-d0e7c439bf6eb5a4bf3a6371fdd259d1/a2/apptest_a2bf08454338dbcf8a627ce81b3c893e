c66e051a6dcf685e0fe360a505c14955
"use strict";

var _interopRequireDefault = require("/home/thisguycodez/op/React-Testing-TV-Show/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _App = _interopRequireDefault(require("./App"));

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _fetchShow = require("./api/fetchShow");

var _jsxFileName = "/home/thisguycodez/op/React-Testing-TV-Show/src/app.test.js";
test('Is the App rendering without crashing', () => {
  const mockApp = jest.fn();
  const {
    getByText,
    getAllByText,
    debug,
    container
  } = (0, _react2.render)(_react.default.createElement(_App.default, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 10
    },
    __self: void 0
  }));
  expect(container.firstChild).toMatchSnapshot();
  getByText(/Fetching data.../i);
});
test('User is able to select a season', async () => {
  // mockFetchShow.mockResolvedValueOnce(showData);
  const {
    getByText,
    getAllByText
  } = (0, _react2.render)(_react.default.createElement(_App.default, {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 24
    },
    __self: void 0
  }));
  await (0, _react2.wait)(() => {
    getByText(/select a season/i);
  });

  _userEvent.default.click(getByText(/select a season/i));

  expect(getAllByText(/season /i)).toHaveLength(4);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50ZXN0LmpzIl0sIm5hbWVzIjpbInRlc3QiLCJtb2NrQXBwIiwiamVzdCIsImZuIiwiZ2V0QnlUZXh0IiwiZ2V0QWxsQnlUZXh0IiwiZGVidWciLCJjb250YWluZXIiLCJleHBlY3QiLCJmaXJzdENoaWxkIiwidG9NYXRjaFNuYXBzaG90IiwidXNlckV2ZW50IiwiY2xpY2siLCJ0b0hhdmVMZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7O0FBR0FBLElBQUksQ0FBQyx1Q0FBRCxFQUEwQyxNQUFJO0FBQ2pELFFBQU1DLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxFQUFMLEVBQWhCO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQSxTQUFGO0FBQWFDLElBQUFBLFlBQWI7QUFBMkJDLElBQUFBLEtBQTNCO0FBQW1DQyxJQUFBQTtBQUFuQyxNQUFnRCxvQkFBTyw2QkFBQyxZQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQVAsQ0FBdEQ7QUFFQUMsRUFBQUEsTUFBTSxDQUFDRCxTQUFTLENBQUNFLFVBQVgsQ0FBTixDQUE2QkMsZUFBN0I7QUFHQU4sRUFBQUEsU0FBUyxDQUFDLG1CQUFELENBQVQ7QUFFQSxDQVRHLENBQUo7QUFjQUosSUFBSSxDQUFDLGlDQUFELEVBQW9DLFlBQVc7QUFDbkQ7QUFDQSxRQUFNO0FBQUVJLElBQUFBLFNBQUY7QUFBWUMsSUFBQUE7QUFBWixNQUE2QixvQkFBTyw2QkFBQyxZQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQVAsQ0FBbkM7QUFFQSxRQUFNLGtCQUFLLE1BQUs7QUFDWkQsSUFBQUEsU0FBUyxDQUFDLGtCQUFELENBQVQ7QUFDSCxHQUZLLENBQU47O0FBS0FPLHFCQUFVQyxLQUFWLENBQWdCUixTQUFTLENBQUMsa0JBQUQsQ0FBekI7O0FBQ0FJLEVBQUFBLE1BQU0sQ0FBQ0gsWUFBWSxDQUFDLFVBQUQsQ0FBYixDQUFOLENBQWlDUSxZQUFqQyxDQUE4QyxDQUE5QztBQUVDLENBWkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHdhaXQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAnXG5pbXBvcnQgdXNlckV2ZW50IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudCdcbmltcG9ydCB7ZmV0Y2hTaG93IGFzIG1vY2tGZXRjaFNob3d9IGZyb20gJy4vYXBpL2ZldGNoU2hvdydcblxuXG50ZXN0KCdJcyB0aGUgQXBwIHJlbmRlcmluZyB3aXRob3V0IGNyYXNoaW5nJywgKCk9Pntcblx0Y29uc3QgbW9ja0FwcCA9IGplc3QuZm4oKTtcblx0Y29uc3QgeyBnZXRCeVRleHQsIGdldEFsbEJ5VGV4dCwgZGVidWcgLCBjb250YWluZXJ9ID0gcmVuZGVyKDxBcHAgLz4pO1xuXG5cdGV4cGVjdChjb250YWluZXIuZmlyc3RDaGlsZCkudG9NYXRjaFNuYXBzaG90KClcblxuXHRcblx0Z2V0QnlUZXh0KC9GZXRjaGluZyBkYXRhLi4uL2kpO1xuXG59KSBcblxuXG5cblxudGVzdCgnVXNlciBpcyBhYmxlIHRvIHNlbGVjdCBhIHNlYXNvbicsIGFzeW5jKCkgPT4ge1xuLy8gbW9ja0ZldGNoU2hvdy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoc2hvd0RhdGEpO1xuY29uc3QgeyBnZXRCeVRleHQsZ2V0QWxsQnlUZXh0IH0gPSByZW5kZXIoPEFwcCAvPik7XG5cbmF3YWl0IHdhaXQoKCkgPT57XG4gICAgZ2V0QnlUZXh0KC9zZWxlY3QgYSBzZWFzb24vaSlcbn0pIFxuXG5cbnVzZXJFdmVudC5jbGljayhnZXRCeVRleHQoL3NlbGVjdCBhIHNlYXNvbi9pKSlcbmV4cGVjdChnZXRBbGxCeVRleHQoL3NlYXNvbiAvaSkpLnRvSGF2ZUxlbmd0aCg0KTtcblxufSk7Il19